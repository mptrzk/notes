flat empty attached
  100000 divs
    script - 416ms
    recalculate style - 986ms
    pre-paint - 286ms
    paint - 73ms
    layout - 1.73s
    frame - 350ms
      that's pre-paint and paint
      does it change if I scroll?
    schedule style recalculation - 80ms
      not always happens
  50000 divs
    script - 300ms
      weird pauses in the function execution graph
        function wrapped in anonymous function
          177ms
    recalculate style - 538ms
    layout - 869ms
    pre-paint - 145ms
    paint - 39ms
  looks linear
  attaching text node before makes layout calculations a wee bit shorter 
  machine 1 - 1.7s vs 1.4s
  machine 2 - 3.4s vs 3.9s


just creating text nodes
  1e7 - ~10s

just creating elements
  1e7 - ~13s

attaching elements just to the top node
replacing top node with pre-rendered tree
replacing part of detached tree


attaching before and after, top down and bottom up, all the same

why so few calls in the profiler

does dom update before the function exits?

do results vary wildly when repeating those benchmarks?

hidden stuff

browser tasks

why prepending a text node makes rendering faster?

is it different if script is triggered by the button press?

so these tests might not be very representatie of normal application 

frame takes much longer compared to other stuff even when rendering 1000 nested divs

all those benchmarks are bullcrap
  why?
    they don't reflect potential uses
    to get a real signal I must do stuff that I would never do normally
      like nesting thousands of divs
      or adding hudreds of thousands of divs to the site



Why does appending this text node make computing the layout faster?

I'm rendering the following pages using chromium on Linux:

page A:
<body>
  <script>
    for (let i=0; i<100000; i++) {
      document.body.appendChild(document.createElement('div'));
    }
  </script>
</body>

page B:
<body>
  <script>
    document.body.appendChild(document.createTextNode('foo'));
    for (let i=0; i<100000; i++) {
      document.body.appendChild(document.createElement('div'));
    }
  </script>
</body>

I rendered the pages about a dozen times each on two machines, each time recoridng a profile using dev tools.
For the respective machines the "layout" stage usually took about 1.7s and 3.9s for page A. For page B it took
about 1.4s and 3.4s.
If the text node was added after the loop, it took as long as for page A. 

[results on 2nd machine are unstable]
  a table?
  what's the bottleneck?

