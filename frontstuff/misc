why use frontend frameworks anyway?
  editing DOM is painful and slow

imperative updates

==================================================
;FRAMEWORKS

frontend framework comparison

angular
  looks bloated
  relatively poor opinions

vue
  supposedly simpler than react
  
react
  components defined as JS classes

preact
  react but tinier?
  a lot of imports
  some scheme virtual dom project uses it


elm
  forces view-model architecture
    might be useful to analyze
  a lot of boilerplate?

svelte
  not a framework

understand code generated by svelte

preact

==================================================
;TEST CASE

simple tree view with "boring" tasks as leaves
  each task
    displays
      question
      an answer box
      streak
        red after wrong answer
        black otherwise
    when user presses 'enter' while the box is focused, the question gets updated

tic tac toe - like in react tutorial?

generalized tic-tac-toe

board representation:
  a 2d array

highlighting rows

Sierpiński's carpet using tables
  zoomable
    culling invisible elements

tile display with table borders


==================================================
;REACT

JSX
  is a syntax extension to JS that lets one write React elements using a language that
  looks like HTML

element vs component
  element is an object based on which React creates a DOM node

bundler and stuff

parcel?
  builds stuff worse than rust

devtools

explain props and state

props are like arguments, but reactive
  does that make sense?

reactivity happens only at props
  rly?

trace the update

triggering the reaction

reactivity vs declarativity

component and element

what setState actually does
  as opposed to assigning property?
    updates reactive stuff?

==================================================
;PREACT

glossary
  component
  prop
  vdom
  htm
  hyperscript

explain reactivity and update propagation

hyperscript
htm 

hooks
  why do they exist?
    something something composition?
  when do they get called?
  are they unnecessary work?

signals
  so AFAIK they make it so you can update stuff without it propagating through props
  where in unpkg???
  what's borken?

htm with multiple top level elements
htm of nothing
variadic function that prints its args

reducer and other hooks
how do hooks work anyway

write as hyperscript
  [move to frontcomp]

"only stuff that changes should be passed as props"
  rly?
  what about square indices in tic-tac-toe?

classes vs closures
  are closures less efficient?
  does V8 handle that?


does an element get re-rendered when its state changes?

leaky abstractions?

how slow is htm


==================================================
;ELM

elm architecture in JS

learn a bit of haskell first


==================================================
;VANILLA


reactivity without virtual DOM?
  inspect what "render" does in preact
  how events work
  hyperscript!

so the constructor should create an object in a well defined state

task
  state
    question
    streak
  constant functions
    answer - update element after an answer
  supplied functions
    generate - update question state
    validate - quesiton validation
    ask - format question


^^
  so that's a typical OOP way of thinking about stuff
    which isn't necessarily wrong
  which functions are passed in as constructor arguments?
    generate, ask, validate
  it would be much harder to think about this sorts of stuff if I didn't muck about
    with the hacky version
  does this apply to vanilla only?
    if so, it shouldn't

butchering the old code?


init/update

input event
  update?
  update('ans')

update vs show
  reactivity

do the vanilla case last

==================================================
;CUSTOM

==================================================
;BROWSER

rendering

SVG

DOM & CSSOM

why CSS exists?

timing the pipeline

sniffin' syscalls

CSS
  float in react tic tac toe
  colon

timing dom update for detached elements

==================================================
;VIRTUAL DOM

sniffing updates


==================================================
;JS

empty JS arrays

Array(10) vs array.from

adding properties to prototype vs newly constructed object
  nested?

==================================================
;UI

PPI-aware UI?

tic tac toe board
  can't it just be done with 2 flex boxes?
    one horizontal, one vertical

miniature of arbitrary component?
  google it

buttons
  so adding border removes animation

selectable palette for the whole site

nice graphs

==================================================
;WRITEUP


problems of web UI development:
  DOM updates are slow
    VDOM
    svelte
  Imperative DOM manipulation is painful
    why
      you've got to think about which stuff depends on the state when you update it
    why declarativity is better
      stuff's equivalent to the defining expression
      stuff's timeless
        variable values are not time-dependent in a given call context
    reactivity
      declarativity seen from imperative world
          rly? then why there's functional reactive programming?
            it might be because it's time-conscious
              what?
        writing to one variable causes another to update
        can I write a reactive C library?
          without nested functions it would suck

what's a component

equivalent of a component in elm


==================================================
;UNCATEGORIZED

react/preact
  reducer initialization 
  callback hooks 
  does effect hook run when refs are bound?
    does the hook order matter here?
      ref hook isn't really needed
      is there anything more to the ref hook?
    should it?


immutability and the shallow checks
  only if component props are actually checked
  and they aren't in Preact
  but if you want them checked, you just pass them to useMemo hook

ah so react does the shallow eq for state changes, not for props changes
  that sounds like a weird decision
    it forces immutability, but otherwise seems useless
    how often do you do a state update with data that didn't change?

that react update helper DSL looks interesting

if I'm supposed to use "memo", I can do It with mutable state as well

learn import syntax once and for all
  is "import X from Y" like  "const X = require Y"?
  { * } 

maybe that copying isn't that bad of a deal
  the view function that gets called redundantly, does way more writes

so redux does reducer composition


what could be stupd about DOM API?

nvsmth
  static virtual dom?
  "sub" expression
    subscribes to publisher
    updates when publisher publishes
  how about hidden stuff?
  just detach/attach


selector
  an object allowing to select a given submodel from a model
selectors must be replicable
    to get arround shallow diffing
  which is kinda meh

"(about q-tic board) it's not a tree! it's a ?compact? DAG"
  isn't it a rare thing to happen in web apps?
  isn't that realization meaningless?

vdom as a second class citizen?
  most things don't require diffing

shitty dom api hypothesis

maybe q-tic is a stupid use case for declarative UI
  I know exactly which DOM nodes need to be changed to what
    still, DOM API feels clunky
      just set the inner HTML
  but score, reset button could use some reactivity
    not really, it's a tiny thing

how about ziuziałka?
  buttons
  knobs

those reducers, man
all the redundand wiring, message passing, etc.
saying the same thing over and over again
it bothers me to wire stuff over and over again
  the function that renders the element knows exactly the part of model which needs to be altered
  it has a pointer to it
    but the mutability problem

one way it would kinda make sense is:
  the components don't re-render if the props don't change
  you only pass the props that are needed to render it
  no re-renders should happen if the end result doesn't change
    they have to be either atomic, constant or parts of the model
      why atomic
      why constant
        never cause a re-render
      why part of the model
what kind of bugs would occur if mutation happened
  stuff not rendering when it should
    because of props not diffing

passing a zipper as a prop?
  would it cause redundant re-render?

a vnode is an implicit argument of a component
  rly?

a component is multi-memoized

why does the problem of state m

why am I thinking about all of this?
  I want to write portable, sandboxable, ephemeral comptuer programs with great, fast UIs

portable
  can run on almost any modern machine

sandboxable
  can't mess with other stuff running on the machine

ephemeral
  can be downloaded, executed and discarded without thinking
  as if it was plugged and unplugged

what are refs for
  referring to the future dom nodes at the render time, so they can be accessed at update time
  by being bound to callbacks which are defined at render time and called at update time
    is the need for refs a proof that the whole system is shit?

"but f



maybe it's the reducer lambda that changes over and over again?
if it's passed as a prop, the component would re-render every time

What I was reacting strongly at was writing boilerplate and immutable copy of a nested array with small changes

immutable element change of m^n array is O(m*n)
and for my 13*11*3*3 array it's 13+11+3+3 = 30

shouldn't preact just reander wrong stuff if I supply it a mutated array?
  not if it doesn't diff props in order to evaluate each component
    like in the thing I wrote
      maybe that demo was wrong

weird datastructure with mutation flag

figure out whether to bother with immutable datastructures for web UI models
if so, how to do it painlessly
q-tic multiple field flip
  as if +30 writes for a single change wasn't enough
isn't that what redux is for?
why does all this voodoo even happen?
if not, 
why didn't it cause any errors in q-tic?

check if it's the same for react

minimal reproducible example of:
  two components with independent props

rendering with array mutation
  does it work for react too?

If I'm doing stuff that looks overcomplicated inefficient, I want to know exactly why


why is layout so slow?
custom reducer
  overgeneralization?
    write both smart version and a dumb version
    dumb version first
      8 minutes, 40 seconds

dumber?
  checking and coloring at once
    call it updateWinner

more imperative way?
  no maps, no recursion

nested iterators?
lambda iterator?


what is the user agent anyway?


is there some smarty-pants way to not repeat myself when coloring stuff after winning?

inspect htm via custom bind
  just console.log?
  read the docs
render without HTM

onkeydown fires for backspace while onkeypress doesn't

is webpack also bloated?

listing imports and exports of a given package

what works
  preact from unpkg & skypack
what doesn't work
  signals from unpkg
    did I really test that?
  signals from skypack

what now
  preact step by step
    recreate previous functionality

does Google work in an iframe if I launch chromium with --disable-web-security?

why do I even need a proxy to fake CORS?
  is that sentence even meaningful?

how does yarn link registration work

sandboxing

how do scripts get loaded with iframes
  do they go away when the iframe gets deleted?

what's react router?

@ in npm packages

pixel scale

including stuff from unpkg
  can I just install them locally and include them?
  wget-a-link
  ?module

so what now?
  react
  modules without node
    text/module?
    exporting
    importing
  gomoku with hooks


parcel without optimizers?

weird "zajeba"
  didn't expect static files to reload on page refresh

cool stuff to build
  side summary thingy
    nav?

hot reload?
  there's a package for that

global install with node without repetition

github pages?
  link modules

hypothesis
  frameworks do init/update automagically

custom lisp

look into virtual dom in preact
flux n' stuff

timing things when thinking about performance

how long does it take to generate the virtual DOM?
how long does it take to render the DOM?


