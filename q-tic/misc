making the functions warmer
  pass the whole state
  return stuff that might be also needed

returning locals as an object with their names preserved as property names
hot return: return all locals

datum embedding

icell -> icellContent

the problem is, I keep reasoning using the more general object

theory of implicit references

what I've been doing is juggling between different ways of referencing what I needed

there's a reason not to use the most general object

which relations or non-relations I care about

in Q-tic stuff can be index-agnostic

this can be a rule of thumb for stuff larger than short scripts
it's better than globals though
  because you know it's warm

state and constants
  
theory of wiring
  it sux

"collapsed" set
count line size along direction
write line sizes to all cells on the line (or entries)


generic bf/df iteration?


why it still works?
  maybe components are redundantly evaluated
  preact re-renders all components without diffing their props



but really, why is separating the game state and the UI a good idea?
  reducing number of invalid states?
  code that makes more sense?
  separation of concerns?

less stateful but more computationally intensive version recomputes color for each icell

game state:
  ocell:
    | closed:
      | X
      | O
    | open:
      - domain
      - [icell * 3 * 3] 

icell:
  | X
  | O
  | Disabled

opened and closed ocells as classes?
  yay
  nay
    seems like a wonky overkill

open ocells have domains
  it stat

You can't join two ocells of the same domain

it would be better of with just score
  the score would be number of marks in a line longer than 2

todo
  literal edge case with updateWinner
    didn't optional-chain all the way
  non-classical win

get a good debugging tool
  


rename iRow, iCol to x, y?
innerTable?
sane numeric range iteration

voodoo
	ocell table as 'value' property
		then isOccupied works for both

translucent element that indicates "disabled"?

separate outer cell and inner table?

collapse the current cell before collapsing others
  should it matter?

when collapsing, exempt the source cell
  what if the cell is collapsed directly?
    call with null

when icell isn't taken, block the opposite

eliminate invalid states first
factor out the click validation?

advanced types, valid board, validation layer

plain ol' subroutines?

hacks
  disabling an icell so it doesn't recur back and forth

the weird freezes happen because the state changes, but the update doesn't return,
so the state doesn't get rendered

why don't I use the debugger
and word highlighting

have one queue, breadth first

separate model and view
  not clickable are always disabled
    they are just gray when they're empty

using stash instead of multiple files
