save as preset

local package manager?

state reset preset
  resetting function in init
  reset() in scratch

css
  why so many rules?


principles
  interactivity
    evaling stuff sent over by vim-slime
    in a way that scales to large projects
    in a practical way
      transparent modules
      origin indifference
      instant shippability as a webapp
    middleware
    after-eval hooks
  ease of setpup
  permissivity 
    no strict bounds to mucking around 
  minimalism
    minimize boilerplate
    minimize external dependencies
    minimize LOC (wihtout golfing)



EJS module paths resolve paths relative to importing file's dir
  this kinda makes sense
    rly?
should wslime modules do it?
  seems like it would break or overcomplicate stuff
    break
      vim-slime would have to send buffer identification

copy wslime client to a working directory
get client to load wslime scripts again
  or not?
    maybe just copy the simple index from the current server sript
index.html


variadic asynchronous wslime.load


writing out the rules and being aware of them doesn't make you
rigid-minded
  you know what to question

noo, forgot about a design principle
  I want the result to be runnable as a static app


project initialization
  --init-minimal
    just copies the client to the cwd
  --init
    copies the to the cwd the following:
      client
      index.html
      init.js
      app.js
      scratch.js
  --init [preset]
    custom preset from $WSLIME_PRESETS
    
preset folder in the repo?
    

remove index.html?
  more opinionation
  but isn't wslime pretty opinionated by design?

sometimes code gets longer while getting simpler
  duh!
  that's de-golfing 

just do the thing




another way slime may add complexity, is that the semantics of code may change on the subsequent evaluations
  especially when it comes to redefining the eval

the rules of sliming are as follows
  don't slime the init file
  don't load the scratch file normally

okay, so why wjs scripts, why not normal js scripts?
  ES modules are opaque
    Which means...
  Normal scripts don't allow top level async
    which makes it unwieldy to run code that depends on imports
    I don't want to use sync requests for imports, because I don't want to block the event loop

libbit
  makes libraries I wrote available to projects
  uses symlinks
  in the working directory they are symlinks
  but the stuff the symlinks point to gets pushed to the repo as normal files

how many threads does a browser need
  what happens when external event fires?
    check out the toy event loop in python

per-module init?
  seems like overthinking
you don't need init logic in code

do you really need wslime init?
you can just make a file that you don't eval in a slimy way

you can achieve SPR by splitting your program into files the right way

back to simple http server? 
  static apps need to have the wslime client in the working directory anyway

is the <script> inner text for when the src can not be fetched?

a static app will need the library in the working directory

so bind doesn't work for arrow functions?

why binding 'window' to eval lets me declare global variables
  first it made sense, now it doesn't
  because "this" is bound to widow in "function" functions, and stuff that's local to them stays local
  maybe it's a quirk of eval

do I really need top-level asynchronicity?
  evals happen after static script load
    yeah, but during the script load imports have to happen
  imports in init only?
      why would you do that?
        to not force async evaluation
    change the module, eval the main script, stuff should get re-imported
    and it would complicate stuff
    and the init would have to be forcibly separated from the rest

double async wrap
  in wslime to eval blocks containing awaits
  in files, so that they work without wslime 
not needed, since slime files will be loaded as scripts
  but what problem does loading files as scripts actually solve
    other than eliminating double async wrap?
    you can do middleware!
    it removes architecutral irregularity
  it's confusing

architectural regularity
  code evaluated in the same order should do the same thing, regardless its origin
better name
  origin-agnosticism
  origin invariance
  origin indifference

origin indifference as a case for splitting into blocks before eval?
it may matter if you're overriding the eval function
I don't want to parse JS for the sake of origin indifference



slime-less SPR
  can be done via cookies
  yeah, but that doesn't preserve hidden state

SPR - state preserving reload

I want
  slime-like interactivity
    can send code snippets to be evaled in top level
  state-preserving reload
  transparent modules
    they get evaled in the main scope
    if you want to hide stuff, you have to do it in the module explicitly
    so I can eval stuff in them
  deployment as static app
    can turn into a static web app


wslime app
js-only by default

index.html would load the slime

all the bootstrapping would have to be in the init

the wslime.js as a module kerfuffle
  I wanted it to be pluggable into existing modules
  that didn't work out, because modules seem to be isolated from the script evaluation scope by browser

but how to make wslime client eval application files in static mode?
  check out the react demo!
    https://gist.githubusercontent.com/gaearon/0275b1e1518599bbeafcde4722e79ed1/raw/db72dcbf3384ee1708c4a07d3be79860db04bff0/example.html
  how JSX gets parsed
    trace it! (with a profiler)
      does the builtin browser profiler support trace debugging?
  runScripts
okay, it reads the script tags and fetches stuff 
  



is having wslime as an import stupid?
  I don't like it being re-imported on each block eval
  Do I want other stuff re-imported?
    yes, if I make a change to it
      but would I? I can't eval stuff in it
    I'd like the modules to be transparent
    just fetch & eval

I don't wanna block the event loop
console awaits don't block the event loop, right?

what problem am I really trying to solve?
  I want imports to work like it's python
    import stuff
    execute code
  not 
    import stuff
    fail to execute code, because import is asynchronous
  having a top-level await is a nice thing also
    I have it in console
    I want it in my repl

I want the saved file to be hostable in a normal way
  can it be all weird?


split shit into blocks
eval them one by one
await each one
imports have to be done through "promise.all"
  seems clunky

wapping everything in "async"
  breaks top level declarations with const & let
    but I don't really need them
    does it break normal declarations?
  it also breaks "function"

make wslime not-a-library
  then the imports can happen on init

synchronou

do I need modules anyway?

custom modules?
  fetch & eval FTW
    fetch is async too

why not make a lisp
  seems a bit of an overkill



what doesn't work?
  ,b-reloading modules

just import it using a <script> tag

but aren't those limitations ruining the possibility of using a middleware and deploying sanely?

split bootstrap when evaling the whole file?

await in eval:
  https://stackoverflow.com/questions/56187117/await-is-only-valid-in-async-function-eval-in-async

problem with js modules
  can I eval within a js module?
    supposedly, no

wslime should be injectable as a library
  it shouldn't be an "index.html" file

understanding js imports
import foo from './bar' means "import the default export object of file 'bar' as foo"
  equivalent of:
    const foo = require('./bar')
oh yeah, and there's also dynamic import()


scratchpad workflow:
  don't muck about in the main file
    it would be nice to have ,y bound as "yank the block"
  bind refresh
  should I yeet whole file detection?
    any reason not to? you don't need to detect it when all the ?helper snippets? are in another file
  ,b for the main file is still useful
    state-preserving reset
  

keep readme clean

"asyncio good for handling many clients"
  from websocket page

how asyncio works
what is that event loop thingy?

do a coroutine tutorial

cool stuff to do
  thunder program
    webaudio + canvas
  bang!
  
  loops with delayed generators, each lightning stronger than the previous one
    

case against server middleware?
  it makes the system less malleable

middleware as js modlues?



costs of slime
  [todo - move near slime apologia]


vim-slime seems slow
  does it write to my usb drive?

Future usage:

    wslime [port]
    wslime -m [local_milddleware....] [port]
    wslime -j [builtin_middleware...] [port]

naah, I want it to do a simple thing well
it's not really just netcat for websockets
  I want the lines to be buffered and sent when they stop comming
  that way I don't have to buffer stuff in JS
    and more importantly - figure out what should be buffered and what shouldn't
      maybe that's a simpler problem?
      maybe client side buffering ain't so bad
        JS has timouts and lambdas that can assign
  the whole 10ms waiting thing

What ESR said about gobbling manuals

I'll do it in a folder now, but then I'll learn how to do branches



I want refreshing state from vim, without reloading
It should work in block eval and with buf eval if fresh

Those are hacks around editor limitation, but I'd like to keep
my editor simple
TODO ponder tradeoffs
it would be nice if I could reset state with something like ,B or ,R
 ,B - state reset
 ,R - page refresh

another hack - commented block signifiers?
 &block
  that would require wslime preprocessing stuff
 or maybe just keep stuff in different files?


